import time
import pandas as pd
from bs4 import BeautifulSoup, Comment
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from io import StringIO
import matplotlib.pyplot as plt
import os

# Th∆∞ m·ª•c g·ªëc n∆°i m·ªçi th·ª© s·∫Ω ƒë∆∞·ª£c l∆∞u
base_dir = r"C:\Users\84353\OneDrive\Desktop\BTL1_Python"

# H√†m chuy·ªÉn ƒë·ªïi tu·ªïi sang ƒë·ªãnh d·∫°ng s·ªë th·∫≠p ph√¢n
def convert_age_to_decimal(age_str):
    try:
        if pd.isna(age_str) or age_str == "N/A":
            return "N/A"
        age_str = str(age_str).strip()
        if "-" in age_str:
            years, days = map(int, age_str.split("-"))
            decimal_age = years + (days / 365)
            return round(decimal_age, 2)
        if "." in age_str:
            return round(float(age_str), 2)
        if age_str.isdigit():
            return round(float(age_str), 2)
        return "N/A"
    except (ValueError, AttributeError) as e:
        print(f"‚ö†Ô∏è L·ªói chuy·ªÉn ƒë·ªïi tu·ªïi cho '{age_str}': {e}")
        return "N/A"

# H√†m tr√≠ch xu·∫•t m√£ qu·ªëc gia t·ª´ c·ªôt "Nation"
def extract_country_code(nation_str):
    try:
        if pd.isna(nation_str) or nation_str == "N/A":
            return "N/A"
        return nation_str.split()[-1]
    except (AttributeError, IndexError):
        return "N/A"

# H√†m l√†m s·∫°ch t√™n c·∫ßu th·ªß
def clean_player_name(name):
    try:
        if pd.isna(name) or name == "N/A":
            return "N/A"
        if "," in name:
            parts = [part.strip() for part in name.split(",")]
            if len(parts) >= 2:
                return " ".join(parts[::-1])
        return " ".join(name.split()).strip()
    except (AttributeError, TypeError):
        return "N/A"

# Thi·∫øt l·∫≠p Selenium WebDriver
options = Options()
options.add_argument("--headless") # Ch·∫°y tr√¨nh duy·ªát ·∫©n
options.add_argument("--disable-gpu") # V√¥ hi·ªáu h√≥a GPU (ƒë√¥i khi h·ªØu √≠ch trong m√¥i tr∆∞·ªùng kh√¥ng c√≥ GPU)
options.add_argument("--no-sandbox") # V√¥ hi·ªáu h√≥a sandbox (ƒë√¥i khi c·∫ßn thi·∫øt trong m·ªôt s·ªë m√¥i tr∆∞·ªùng)
driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options) # Kh·ªüi t·∫°o WebDriver

# ƒê·ªãnh nghƒ©a c√°c URL v√† ID b·∫£ng
urls = [
    "https://fbref.com/en/comps/9/2024-2025/stats/2024-2025-Premier-League-Stats", # URL th·ªëng k√™ chung
    "https://fbref.com/en/comps/9/2024-2025/keepers/2024-2025-Premier-League-Stats", # URL th·ªëng k√™ th·ªß m√¥n
    "https://fbref.com/en/comps/9/2024-2025/shooting/2024-2025-Premier-League-Stats", # URL th·ªëng k√™ s√∫t b√≥ng
    "https://fbref.com/en/comps/9/2024-2025/passing/2024-2025-Premier-League-Stats", # URL th·ªëng k√™ chuy·ªÅn b√≥ng
    "https://fbref.com/en/comps/9/2024-2025/gca/2024-2025-Premier-League-Stats", # URL th·ªëng k√™ ki·∫øn t·∫°o v√† t·∫°o c∆° h·ªôi ghi b√†n
    "https://fbref.com/en/comps/9/2024-2025/defense/2024-2025-Premier-League-Stats", # URL th·ªëng k√™ ph√≤ng ng·ª±
    "https://fbref.com/en/comps/9/2024-2025/possession/2024-2025-Premier-League-Stats", # URL th·ªëng k√™ ki·ªÉm so√°t b√≥ng
    "https://fbref.com/en/comps/9/2024-2025/misc/2024-2025-Premier-League-Stats", # URL th·ªëng k√™ kh√°c
]

table_ids = [
    "stats_standard", # ID b·∫£ng th·ªëng k√™ chung
    "stats_keeper", # ID b·∫£ng th·ªëng k√™ th·ªß m√¥n
    "stats_shooting", # ID b·∫£ng th·ªëng k√™ s√∫t b√≥ng
    "stats_passing", # ID b·∫£ng th·ªëng k√™ chuy·ªÅn b√≥ng
    "stats_gca", # ID b·∫£ng th·ªëng k√™ ki·∫øn t·∫°o v√† t·∫°o c∆° h·ªôi ghi b√†n
    "stats_defense", # ID b·∫£ng th·ªëng k√™ ph√≤ng ng·ª±
    "stats_possession", # ID b·∫£ng th·ªëng k√™ ki·ªÉm so√°t b√≥ng
    "stats_misc", # ID b·∫£ng th·ªëng k√™ kh√°c
]

# ƒê·ªãnh nghƒ©a c√°c c·ªôt c·∫ßn thi·∫øt theo ƒë√∫ng th·ª© t·ª±
required_columns = [
    "Player", "Nation", "Team", "Position", "Age",
    "Matches Played", "Starts", "Minutes",
    "Gls", "Ast", "crdY", "crdR",
    "xG", "xAG",
    "PrgC", "PrgP", "PrgR",
    "Gls per 90", "Ast per 90", "xG per 90", "xAG per 90",
    "GA90", "Save%", "CS%", "PK Save%",
    "SoT%", "SoT per 90", "G per Sh", "Dist",
    "Cmp", "Cmp%", "TotDist", "ShortCmp%", "MedCmp%", "LongCmp%", "KP", "Pass into 1_3", "PPA", "CrsPA",
    "SCA", "SCA90", "GCA", "GCA90",
    "Tkl", "TklW",
    "Deff Att", "Lost",
    "Blocks", "Sh", "Pass", "Int",
    "Touches", "Def Pen", "Def 3rd", "Mid 3rd", "Att 3rd", "Att Pen",
    "Take-Ons Att", "Succ%", "Tkld%",
    "Carries", "ProDist", "Carries 1_3", "CPA", "Mis", "Dis",
    "Rec", "Rec PrgR",
    "Fls", "Fld", "Off", "Crs", "Recov",
    "Aerl Won", "Aerl Lost", "Aerl Won%"
]

# ƒê·ªãnh nghƒ©a c√°c t·ª´ ƒëi·ªÉn ƒë·ªïi t√™n c·ªôt cho t·ª´ng b·∫£ng
column_rename_dict = {
    "stats_standard": {
        "Unnamed: 1": "Player",
        "Unnamed: 2": "Nation",
        "Unnamed: 3": "Position",
        "Unnamed: 4": "Team",
        "Unnamed: 5": "Age",
        "Playing Time": "Matches Played",
        "Playing Time.1": "Starts",
        "Playing Time.2": "Minutes",
        "Performance": "Gls",
        "Performance.1": "Ast",
        "Performance.6": "crdY",
        "Performance.7": "crdR",
        "Expected": "xG",
        "Expected.2": "xAG",
        "Progression": "PrgC",
        "Progression.1": "PrgP",
        "Progression.2": "PrgR",
        "Per 90 Minutes": "Gls per 90",
        "Per 90 Minutes.1": "Ast per 90",
        "Per 90 Minutes.5": "xG per 90",
        "Per 90 Minutes.6": "xAG per 90"
    },
    "stats_keeper": {
        "Unnamed: 1": "Player",
        "Performance.1": "GA90",
        "Performance.4": "Save%",
        "Performance.9": "CS%",
        "Penalty Kicks.4": "PK Save%"
    },
    "stats_shooting": {
        "Unnamed: 1": "Player",
        "Standard.3": "SoT%",
        "Standard.5": "SoT per 90",
        "Standard.6": "G per Sh",
        "Standard.8": "Dist"
    },
    "stats_passing": {
        "Unnamed: 1": "Player",
        "Total": "Cmp",
        "Total.2": "Cmp%",
        "Total.3": "TotDist",
        "Short.2": "ShortCmp%",
        "Medium.2": "MedCmp%",
        "Long.2": "LongCmp%",
        "Unnamed: 26": "KP",
        "Unnamed: 27": "Pass into 1_3",
        "Unnamed: 28": "PPA",
        "Unnamed: 29": "CrsPA",
    },
    "stats_gca": {
        "Unnamed: 1": "Player",
        "SCA.1": "SCA90",
        "GCA.1": "GCA90",
    },
    "stats_defense": {
        "Unnamed: 1": "Player",
        "Tackles": "Tkl", "Tackles.1": "TklW",
        "Challenges.1": "Deff Att",
        "Challenges.3": "Lost",
        "Blocks": "Blocks",
        "Blocks.1": "Sh",
        "Blocks.2": "Pass",
        "Unnamed: 20": "Int",
    },
    "stats_possession": {
        "Unnamed: 1": "Player",
        "Touches": "Touches",
        "Touches.1": "Def Pen",
        "Touches.2": "Def 3rd",
        "Touches.3": "Mid 3rd",
        "Touches.4": "Att 3rd",
        "Touches.5": "Att Pen",
        "Touches.6": "Live",
        "Take-Ons": "Take-Ons Att",
        "Take-Ons.2": "Succ%",
        "Take-Ons.4": "Tkld%",
        "Carries": "Carries",
        "Carries.2": "ProDist",
        "Carries.4": "Carries 1_3",
        "Carries.5": "CPA",
        "Carries.6": "Mis",
        "Carries.7": "Dis",
        "Receiving": "Rec",
        "Receiving.1": "Rec PrgR",
    },
    "stats_misc": {
        "Unnamed: 1": "Player",
        "Performance.3": "Fls",
        "Performance.4": "Fld",
        "Performance.5": "Off",
        "Performance.6": "Crs",
        "Performance.12": "Recov",
        "Aerial Duels": "Aerl Won",
        "Aerial Duels.1": "Aerl Lost",
        "Aerial Duels.2": "Aerl Won%"
    }
}

# Kh·ªüi t·∫°o t·ª´ ƒëi·ªÉn ƒë·ªÉ l∆∞u tr·ªØ t·∫•t c·∫£ c√°c b·∫£ng
all_tables = {}

# Thu th·∫≠p v√† x·ª≠ l√Ω t·ª´ng b·∫£ng
for url, table_id in zip(urls, table_ids):
    print(f"üîç ƒêang x·ª≠ l√Ω {table_id} t·ª´ {url}")
    driver.get(url)
    time.sleep(3) # ƒê·ª£i trang t·∫£i xong

    soup = BeautifulSoup(driver.page_source, "html.parser")
    # T√¨m ki·∫øm c√°c comment trong HTML
    comments = soup.find_all(string=lambda text: isinstance(text, Comment))
    table = None
    # Duy·ªát qua c√°c comment ƒë·ªÉ t√¨m b·∫£ng c√≥ ID ph√π h·ª£p
    for comment in comments:
        if table_id in comment:
            comment_soup = BeautifulSoup(comment, "html.parser")
            table = comment_soup.find("table", {"id": table_id})
            if table:
                break # T√¨m th·∫•y b·∫£ng, tho√°t v√≤ng l·∫∑p

    if not table:
        print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y b·∫£ng {table_id}!")
        continue # B·ªè qua b·∫£ng n√†y v√† chuy·ªÉn sang b·∫£ng ti·∫øp theo

    try:
        # ƒê·ªçc b·∫£ng HTML v√†o DataFrame
        df = pd.read_html(StringIO(str(table)), header=0)[0]
    except Exception as e:
        print(f"‚ùå L·ªói khi ƒë·ªçc b·∫£ng {table_id}: {e}")
        continue # X·ª≠ l√Ω l·ªói v√† b·ªè qua b·∫£ng n√†y

    print(f"üìã C√°c c·ªôt g·ªëc trong {table_id}:", df.columns.tolist())
    # ƒê·ªïi t√™n c√°c c·ªôt theo t·ª´ ƒëi·ªÉn ƒë√£ ƒë·ªãnh nghƒ©a
    df = df.rename(columns=column_rename_dict.get(table_id, {}))
    # X√≥a c√°c c·ªôt tr√πng l·∫∑p (do header nhi·ªÅu d√≤ng)
    df = df.loc[:, ~df.columns.duplicated()]

    # L√†m s·∫°ch v√† x·ª≠ l√Ω c·ªôt "Player"
    if "Player" in df.columns:
        df["Player"] = df["Player"].apply(clean_player_name)
        print(f"T√™n c·∫ßu th·ªß m·∫´u trong {table_id}:", df["Player"].head(5).tolist())

    # Chuy·ªÉn ƒë·ªïi v√† x·ª≠ l√Ω c·ªôt "Age"
    if "Age" in df.columns:
        print(f"Gi√° tr·ªã Age th√¥ trong {table_id} (tr∆∞·ªõc khi chuy·ªÉn ƒë·ªïi):", df["Age"].head(5).tolist())
        df["Age"] = df["Age"].apply(convert_age_to_decimal)
        print(f"Gi√° tr·ªã Age ƒë√£ x·ª≠ l√Ω trong {table_id} (sau khi chuy·ªÉn ƒë·ªïi):", df["Age"].head(5).tolist())

    print(f"üìù C√°c c·ªôt ƒë√£ ƒë·ªïi t√™n v√† l√†m s·∫°ch trong {table_id}:", df.columns.tolist())
    # L∆∞u DataFrame v√†o t·ª´ ƒëi·ªÉn
    all_tables[table_id] = df

# G·ªôp t·∫•t c·∫£ c√°c DataFrame d·ª±a tr√™n c·ªôt "Player"
merged_df = None

for table_id, df in all_tables.items():
    # Ch·ªâ gi·ªØ l·∫°i c√°c c·ªôt c·∫ßn thi·∫øt
    df = df[[col for col in df.columns if col in required_columns]]
    # X√≥a c√°c h√†ng tr√πng l·∫∑p d·ª±a tr√™n "Player"
    df = df.drop_duplicates(subset=["Player"], keep="first")

    if merged_df is None:
        merged_df = df # B·∫£ng ƒë·∫ßu ti√™n ƒë∆∞·ª£c g√°n l√†m merged_df
    else:
        try:
            # G·ªôp c√°c DataFrame b·∫±ng c√°ch s·ª≠ d·ª•ng c·ªôt "Player"
            merged_df = pd.merge(merged_df, df, on="Player", how="outer", validate="1:1")
        except Exception as e:
            print(f"‚ùå L·ªói khi g·ªôp b·∫£ng {table_id}: {e}")
            continue # X·ª≠ l√Ω l·ªói g·ªôp v√† b·ªè qua b·∫£ng n√†y

# S·∫Øp x·∫øp l·∫°i c√°c c·ªôt theo th·ª© t·ª± c·ªßa required_columns
merged_df = merged_df.loc[:, [col for col in required_columns if col in merged_df.columns]]

# Chuy·ªÉn ƒë·ªïi c·ªôt "Minutes" sang d·∫°ng s·ªë, x·ª≠ l√Ω c√°c gi√° tr·ªã kh√¥ng h·ª£p l·ªá
merged_df["Minutes"] = pd.to_numeric(merged_df["Minutes"], errors="coerce")

# ƒê·ªãnh nghƒ©a c√°c c·ªôt theo ki·ªÉu d·ªØ li·ªáu
int_columns = ["Matches Played", "Starts", "Minutes", "Gls", "Ast", "crdY", "crdR", "PrgC", "PrgP", "PrgR",
               "Cmp", "TotDist", "Tkl", "TklW", "Deff Att", "Lost", "Blocks", "Sh", "Pass", "Int",
               "Touches", "Def Pen", "Def 3rd", "Mid 3rd", "Att 3rd", "Att Pen", "Take-Ons Att",
               "Carries", "Carries 1_3", "CPA", "Mis", "Dis", "Rec", "Rec PrgR",
               "Fls", "Fld", "Off", "Crs", "Recov", "Aerl Won", "Aerl Lost"]
float_columns = ["Age", "xG", "xAG", "Gls per 90", "Ast per 90", "xG per 90", "xAG per 90", "GA90", "Save%", "CS%", "PK Save%",
                 "SoT%", "SoT per 90", "G per Sh", "Dist", "Cmp%", "ShortCmp%", "MedCmp%", "LongCmp%", "KP", "Pass into 1_3", "PPA",
                 "CrsPA", "SCA", "SCA90", "GCA", "GCA90", "Succ%", "Tkld%", "ProDist", "Aerl Won%"]
string_columns = ["Player", "Nation", "Team", "Position"]

# Chuy·ªÉn ƒë·ªïi c√°c c·ªôt ki·ªÉu s·ªë nguy√™n, x·ª≠ l√Ω c√°c gi√° tr·ªã kh√¥ng h·ª£p l·ªá th√†nh NaN
for col in int_columns:
    if col in merged_df.columns:
        merged_df[col] = pd.to_numeric(merged_df[col], errors="coerce").astype("Int64")

# Chuy·ªÉn ƒë·ªïi c√°c c·ªôt ki·ªÉu s·ªë th·ª±c, gi·ªØ nguy√™n NaN
for col in float_columns:
    if col in merged_df.columns:
        merged_df[col] = pd.to_numeric(merged_df[col], errors="coerce").round(2)

# L·ªçc ra c√°c c·∫ßu th·ªß c√≥ h∆°n 90 ph√∫t thi ƒë·∫•u
merged_df = merged_df[merged_df["Minutes"].notna() & (merged_df["Minutes"] > 90)]

# Chuy·ªÉn ƒë·ªïi c·ªôt "Nation" ch·ªâ c√≤n m√£ qu·ªëc gia
if "Nation" in merged_df.columns:
    merged_df["Nation"] = merged_df["Nation"].apply(extract_country_code)

# L√†m s·∫°ch l·∫°i c·ªôt "Player" sau khi g·ªôp
if "Player" in merged_df.columns:
    merged_df["Player"] = merged_df["Player"].apply(clean_player_name)

# ƒêi·ªÅn gi√° tr·ªã NaN trong c√°c c·ªôt chu·ªói b·∫±ng "N/A"
for col in string_columns:
    if col in merged_df.columns:
        merged_df[col] = merged_df[col].fillna("N/A")

# In v√†i d√≤ng ƒë·∫ßu ƒë·ªÉ ki·ªÉm tra
print("\nüìä Xem tr∆∞·ªõc DataFrame cu·ªëi c√πng (5 d√≤ng ƒë·∫ßu) tr∆∞·ªõc khi l∆∞u v√†o result.csv:")
print(merged_df.head(5).to_string())

# T·∫°o th∆∞ m·ª•c 'csv' b√™n trong base_dir n·∫øu n√≥ ch∆∞a t·ªìn t·∫°i
csv_dir = os.path.join(base_dir, "csv")
os.makedirs(csv_dir, exist_ok=True)

# L∆∞u DataFrame ƒë√£ g·ªôp v√†o t·ªáp CSV trong th∆∞ m·ª•c 'csv', gi·ªØ nguy√™n c√°c gi√° tr·ªã NaN
result_path = os.path.join(csv_dir, "result.csv")
merged_df.to_csv(result_path, index=False, encoding="utf-8-sig", na_rep="N/A") # na_rep="N/A" ƒë·ªÉ bi·ªÉu di·ªÖn NaN b·∫±ng "N/A" trong CSV
print(f"‚úÖ ƒê√£ l∆∞u d·ªØ li·ªáu ƒë√£ g·ªôp th√†nh c√¥ng v√†o {result_path} v·ªõi {merged_df.shape[0]} h√†ng v√† {merged_df.shape[1]} c·ªôt.")

# ƒê√≥ng WebDriver
driver.quit()