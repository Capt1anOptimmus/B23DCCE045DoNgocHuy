import time
import pandas as pd
from bs4 import BeautifulSoup, Comment
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from io import StringIO
import matplotlib.pyplot as plt
import os

# ƒê·ªãnh nghƒ©a th∆∞ m·ª•c g·ªëc
base_dir = r"C:\Users\84353\OneDrive\Desktop\BTL1_Python"

# ƒê·ªãnh nghƒ©a th∆∞ m·ª•c cho c√°c t·ªáp CSV ƒë·∫ßu v√†o v√† ƒë·∫ßu ra
csv_dir = os.path.join(base_dir, "csv")

# ƒê·ªãnh nghƒ©a ƒë∆∞·ªùng d·∫´n ƒë·∫øn t·ªáp CSV ƒë·∫ßu v√†o trong th∆∞ m·ª•c csv
input_csv_path = os.path.join(csv_dir, "result.csv") # C·∫≠p nh·∫≠t ƒë∆∞·ªùng d·∫´n

# T·∫°o th∆∞ m·ª•c 'csv' n·∫øu n√≥ ch∆∞a t·ªìn t·∫°i (h·ªØu √≠ch khi ch·∫°y l·∫ßn ƒë·∫ßu)
os.makedirs(csv_dir, exist_ok=True)
print(f"ƒê·∫£m b·∫£o th∆∞ m·ª•c {csv_dir} t·ªìn t·∫°i.")


# ƒê·ªçc t·ªáp CSV v√†o DataFrame c·ªßa pandas
try:
    # na_values=["N/A"] ƒë·ªÉ ƒë·∫£m b·∫£o c√°c gi√° tr·ªã "N/A" ƒë∆∞·ª£c ƒë·ªçc l√† NaN (Not a Number)
    df = pd.read_csv(input_csv_path, na_values=["N/A"])
    print(f"‚úÖ T·∫£i d·ªØ li·ªáu th√†nh c√¥ng t·ª´ {input_csv_path}")
except FileNotFoundError:
    print(f"‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y t·ªáp ƒë·∫ßu v√†o t·∫°i {input_csv_path}")
    exit() # Tho√°t n·∫øu kh√¥ng t√¨m th·∫•y t·ªáp ƒë·∫ßu v√†o
except Exception as e:
    print(f"‚ùå L·ªói khi t·∫£i t·ªáp CSV: {e}")
    exit() # Tho√°t n·∫øu c√≥ l·ªói kh√°c khi t·∫£i

# T·∫°o m·ªôt b·∫£n sao c·ªßa DataFrame ƒë·ªÉ th·ª±c hi·ªán c√°c t√≠nh to√°n, chuy·ªÉn NaN th√†nh 0 ·ªü c√°c c·ªôt s·ªë
df_calc = df.copy()

# ƒê·ªãnh nghƒ©a c√°c c·ªôt c·∫ßn lo·∫°i tr·ª´ (kh√¥ng ph·∫£i l√† s·ªë)
exclude_columns = ["Player", "Nation", "Team", "Position"]

# Chuy·ªÉn NaN th√†nh 0 trong c√°c c·ªôt s·ªë ƒë·ªÉ t√≠nh to√°n
numeric_columns = [col for col in df_calc.columns if col not in exclude_columns]
for col in numeric_columns:
    # Chuy·ªÉn sang d·∫°ng s·ªë, ƒë·∫£m b·∫£o NaN cho c√°c gi√° tr·ªã kh√¥ng ph·∫£i s·ªë, sau ƒë√≥ ƒëi·ªÅn 0 v√†o NaN
    # S·ª≠ d·ª•ng errors='coerce' ƒë·ªÉ bi·∫øn c√°c gi√° tr·ªã kh√¥ng ph·∫£i s·ªë th√†nh NaN tr∆∞·ªõc khi ƒëi·ªÅn
    df_calc[col] = pd.to_numeric(df_calc[col], errors="coerce").fillna(0)

print("D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l√†m s·∫°ch v√† c√°c c·ªôt s·ªë ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω.")

# 1. T·∫°o t·ªáp top_3.txt
rankings = {}
for col in numeric_columns:
    # X·ª≠ l√Ω c√°c tr∆∞·ªùng h·ª£p m√† m·ªôt c·ªôt c√≥ th·ªÉ ho√†n to√†n l√† 0 ho·∫∑c kh√¥ng ph·∫£i s·ªë sau khi chuy·ªÉn ƒë·ªïi
    # Ki·ªÉm tra n·∫øu t·ªïng t·∫•t c·∫£ c√°c gi√° tr·ªã l√† 0 nh∆∞ng v·∫´n c√≥ d·ªØ li·ªáu trong c·ªôt
    if df_calc[col].sum() == 0 and df_calc[col].count() > 0:
          print(f"B·ªè qua x·∫øp h·∫°ng cho '{col}' v√¨ t·∫•t c·∫£ c√°c gi√° tr·ªã ƒë·ªÅu l√† 0.")
          continue # B·ªè qua c·ªôt n√†y v√† chuy·ªÉn sang c·ªôt ti·∫øp theo n·∫øu t·∫•t c·∫£ gi√° tr·ªã ƒë·ªÅu l√† 0

    # Top 3 Cao nh·∫•t
    # S·ª≠ d·ª•ng copy() ƒë·ªÉ tr√°nh SettingWithCopyWarning
    top_3_high = df_calc[["Player", "Team", col]].sort_values(by=col, ascending=False).head(3).copy()
    top_3_high = top_3_high.rename(columns={col: "Value"})
    top_3_high["Rank"] = ["1st", "2nd", "3rd"]

    # Top 3 Th·∫•p nh·∫•t (ch·ªâ xem x√©t c√°c gi√° tr·ªã kh√°c 0 n·∫øu t·ªìn t·∫°i)
    # S·ª≠ d·ª•ng copy()
    non_zero_df = df_calc[df_calc[col] > 0].copy()
    if not non_zero_df.empty:
        # S·ª≠ d·ª•ng copy()
        top_3_low = non_zero_df[["Player", "Team", col]].sort_values(by=col, ascending=True).head(3).copy()
    else:
        # N·∫øu kh√¥ng c√≥ gi√° tr·ªã kh√°c 0, l·∫•y 3 gi√° tr·ªã th·∫•p nh·∫•t t·ª´ d·ªØ li·ªáu g·ªëc (s·∫Ω l√† 0)
        # S·ª≠ d·ª•ng copy()
        top_3_low = df_calc[["Player", "Team", col]].sort_values(by=col, ascending=True).head(3).copy()


    top_3_low = top_3_low.rename(columns={col: "Value"})
    top_3_low["Rank"] = ["1st", "2nd", "3rd"]

    rankings[col] = {
        "Highest": top_3_high,
        "Lowest": top_3_low
    }

# L∆∞u k·∫øt qu·∫£ v√†o t·ªáp top_3.txt trong base_dir
top_3_path = os.path.join(base_dir, "top_3.txt")
with open(top_3_path, "w", encoding="utf-8") as f:
    for stat, data in rankings.items():
        f.write(f"\nTh·ªëng k√™: {stat}\n")
        f.write("\nTop 3 Cao nh·∫•t:\n")
        # ƒê·∫£m b·∫£o c√°c c·ªôt t·ªìn t·∫°i tr∆∞·ªõc khi c·ªë g·∫Øng in
        if not data["Highest"].empty:
             f.write(data["Highest"][["Rank", "Player", "Team", "Value"]].to_string(index=False))
        else:
             f.write("Kh√¥ng c√≥ d·ªØ li·ªáu.\n")

        f.write("\n\nTop 3 Th·∫•p nh·∫•t:\n")
        if not data["Lowest"].empty:
            f.write(data["Lowest"][["Rank", "Player", "Team", "Value"]].to_string(index=False))
        else:
             f.write("Kh√¥ng c√≥ d·ªØ li·ªáu.\n")

        f.write("\n" + "-" * 50 + "\n")
print(f"‚úÖ ƒê√£ l∆∞u x·∫øp h·∫°ng top 3 v√†o {top_3_path}")

# 2. T√≠nh to√°n trung v·ªã (median), trung b√¨nh (mean) v√† ƒë·ªô l·ªách chu·∫©n (standard deviation) cho t·ªáp results2.csv
rows = []
# Th√™m h√†ng t·ªïng th·ªÉ tr∆∞·ªõc
all_stats = {"": "all"}
for col in numeric_columns:
    # ƒê·∫£m b·∫£o c·ªôt l√† s·ªë tr∆∞·ªõc khi t√≠nh to√°n th·ªëng k√™
    if pd.api.types.is_numeric_dtype(df_calc[col]):
        all_stats[f"Trung v·ªã c·ªßa {col}"] = df_calc[col].median()
        all_stats[f"Trung b√¨nh c·ªßa {col}"] = df_calc[col].mean()
        all_stats[f"ƒê·ªô l·ªách chu·∫©n c·ªßa {col}"] = df_calc[col].std()
    else:
        all_stats[f"Trung v·ªã c·ªßa {col}"] = None # Ho·∫∑c m·ªôt ch·ªâ b√°o n√†o ƒë√≥
        all_stats[f"Trung b√¨nh c·ªßa {col}"] = None
        all_stats[f"ƒê·ªô l·ªách chu·∫©n c·ªßa {col}"] = None

rows.append(all_stats)

# T√≠nh to√°n th·ªëng k√™ cho t·ª´ng ƒë·ªôi
teams = sorted(df_calc["Team"].unique()) # L·∫•y danh s√°ch c√°c ƒë·ªôi duy nh·∫•t v√† s·∫Øp x·∫øp
for team in teams:
    # S·ª≠ d·ª•ng copy()
    team_df = df_calc[df_calc["Team"] == team].copy()
    team_stats = {"": team}
    for col in numeric_columns:
          if pd.api.types.is_numeric_dtype(team_df[col]):
              team_stats[f"Trung v·ªã c·ªßa {col}"] = team_df[col].median()
              team_stats[f"Trung b√¨nh c·ªßa {col}"] = team_df[col].mean()
              team_stats[f"ƒê·ªô l·ªách chu·∫©n c·ªßa {col}"] = team_df[col].std()
          else:
              team_stats[f"Trung v·ªã c·ªßa {col}"] = None
              team_stats[f"Trung b√¨nh c·ªßa {col}"] = None
              team_stats[f"ƒê·ªô l·ªách chu·∫©n c·ªßa {col}"] = None
    rows.append(team_stats)

# T·∫°o DataFrame t·ª´ c√°c h√†ng th·ªëng k√™
results_df = pd.DataFrame(rows)
# ƒê·ªïi t√™n c·ªôt ƒë·∫ßu ti√™n
results_df = results_df.rename(columns={"": "ƒê·ªôi/T·ªïng th·ªÉ"})
for col in results_df.columns:
    if col != "ƒê·ªôi/T·ªïng th·ªÉ":
        # Ch·ªâ l√†m tr√≤n c√°c c·ªôt s·ªë
        if pd.api.types.is_numeric_dtype(results_df[col]):
            results_df[col] = results_df[col].round(2)

# L∆∞u k·∫øt qu·∫£ v√†o t·ªáp results2.csv trong th∆∞ m·ª•c 'csv'
results2_path = os.path.join(csv_dir, "results2.csv")
results_df.to_csv(results2_path, index=False, encoding="utf-8-sig")
print(f"‚úÖ ƒê√£ l∆∞u th·ªëng k√™ th√†nh c√¥ng v√†o {results2_path} v·ªõi {results_df.shape[0]} h√†ng v√† {results_df.shape[1]} c·ªôt.")

# 3. V·∫Ω bi·ªÉu ƒë·ªì histogram cho c√°c th·ªëng k√™ ƒë√£ ch·ªçn
selected_stats = ["Gls per 90", "xG per 90", "SCA90", "GA90", "TklW", "Blocks"]
histograms_dir = os.path.join(base_dir, "histograms")
league_dir = os.path.join(histograms_dir, "league")
teams_dir = os.path.join(histograms_dir, "teams")

# T·∫°o c√°c th∆∞ m·ª•c l∆∞u histogram
os.makedirs(league_dir, exist_ok=True)
os.makedirs(teams_dir, exist_ok=True)
print(f"ƒê·∫£m b·∫£o c√°c th∆∞ m·ª•c {league_dir} v√† {teams_dir} t·ªìn t·∫°i.")

# L·∫•y danh s√°ch c√°c ƒë·ªôi ƒë√£ s·∫Øp x·∫øp
teams = sorted(df_calc["Team"].unique())
for stat in selected_stats:
    # Ki·ªÉm tra xem th·ªëng k√™ c√≥ t·ªìn t·∫°i v√† l√† ki·ªÉu s·ªë hay kh√¥ng
    if stat not in df_calc.columns or not pd.api.types.is_numeric_dtype(df_calc[stat]):
        print(f"‚ö†Ô∏è Th·ªëng k√™ '{stat}' kh√¥ng t√¨m th·∫•y ho·∫∑c kh√¥ng ph·∫£i l√† s·ªë trong DataFrame. B·ªè qua vi·ªác t·∫°o histogram.")
        continue

    # Histogram to√†n gi·∫£i ƒë·∫•u
    plt.figure(figsize=(10, 6))
    plt.hist(df_calc[stat], bins=20, color="skyblue", edgecolor="black")
    plt.title(f"Ph√¢n ph·ªëi to√†n gi·∫£i ƒë·∫•u c·ªßa {stat}")
    plt.xlabel(stat)
    plt.ylabel("S·ªë l∆∞·ª£ng c·∫ßu th·ªß")
    plt.grid(True, alpha=0.3)
    # L∆∞u bi·ªÉu ƒë·ªì
    plt.savefig(os.path.join(league_dir, f"{stat}_league.png"), bbox_inches="tight")
    plt.close() # ƒê√≥ng bi·ªÉu ƒë·ªì ƒë·ªÉ gi·∫£i ph√≥ng b·ªô nh·ªõ
    print(f"üìä ƒê√£ l∆∞u histogram to√†n gi·∫£i ƒë·∫•u cho {stat}")

    # Histogram cho t·ª´ng ƒë·ªôi
    for team in teams:
        # S·ª≠ d·ª•ng copy()
        team_data = df_calc[df_calc["Team"] == team].copy()
        # Ki·ªÉm tra n·∫øu d·ªØ li·ªáu ƒë·ªôi r·ªóng ho·∫∑c c·ªôt th·ªëng k√™ kh√¥ng ph·∫£i s·ªë
        if team_data.empty or not pd.api.types.is_numeric_dtype(team_data[stat]):
             print(f"B·ªè qua histogram cho '{team}' - '{stat}' do d·ªØ li·ªáu r·ªóng ho·∫∑c c·ªôt kh√¥ng ph·∫£i s·ªë.")
             continue

        plt.figure(figsize=(8, 6))
        # S·ª≠ d·ª•ng m√†u kh√°c nhau cho c√°c th·ªëng k√™ ph√≤ng ng·ª±
        color = "lightgreen" if stat in ["GA90", "TklW", "Blocks"] else "skyblue"
        plt.hist(team_data[stat], bins=10, color=color,
                 edgecolor="black", alpha=0.7)
        plt.title(f"{team} - Ph√¢n ph·ªëi c·ªßa {stat}")
        plt.xlabel(stat)
        plt.ylabel("S·ªë l∆∞·ª£ng c·∫ßu th·ªß")
        plt.grid(True, alpha=0.3)
        # Thay th·∫ø kho·∫£ng tr·∫Øng v√† d·∫•u g·∫°ch ch√©o cho t√™n t·ªáp
        stat_filename = stat.replace(" ", "_").replace("/", "_")
        # L∆∞u bi·ªÉu ƒë·ªì cho t·ª´ng ƒë·ªôi
        plt.savefig(os.path.join(teams_dir, f"{team}_{stat_filename}.png"), bbox_inches="tight")
        plt.close() # ƒê√≥ng bi·ªÉu ƒë·ªì
        print(f"üìä ƒê√£ l∆∞u histogram cho {team} - {stat}")

print("‚úÖ T·∫•t c·∫£ c√°c histogram cho c√°c th·ªëng k√™ ƒë√£ ch·ªçn ƒë√£ ƒë∆∞·ª£c t·∫°o v√† l∆∞u trong th∆∞ m·ª•c 'histograms'.")

# 4. X√°c ƒë·ªãnh ƒë·ªôi c√≥ gi√° tr·ªã trung b√¨nh cao nh·∫•t cho m·ªói th·ªëng k√™
# ƒê·∫£m b·∫£o ch·ªâ c√°c c·ªôt s·ªë ƒë∆∞·ª£c bao g·ªìm trong t√≠nh to√°n trung b√¨nh theo nh√≥m
numeric_cols_for_mean = [col for col in numeric_columns if pd.api.types.is_numeric_dtype(df_calc[col])]

if not numeric_cols_for_mean:
    print("‚ö†Ô∏è Kh√¥ng c√≥ c·ªôt s·ªë n√†o kh·∫£ d·ª•ng ƒë·ªÉ t√≠nh to√°n trung b√¨nh c·ªßa ƒë·ªôi.")
    highest_teams_df = pd.DataFrame() # T·∫°o DataFrame r·ªóng
else:
    # T√≠nh trung b√¨nh cho t·ª´ng ƒë·ªôi theo c√°c c·ªôt s·ªë
    team_means = df_calc.groupby("Team")[numeric_cols_for_mean].mean().reset_index()

    highest_teams = []
    for stat in numeric_cols_for_mean:
        # Ki·ªÉm tra xem c·ªôt c√≥ t·ªìn t·∫°i v√† c√≥ d·ªØ li·ªáu tr∆∞·ªõc khi t√¨m gi√° tr·ªã l·ªõn nh·∫•t
        if stat in team_means.columns and not team_means[stat].isnull().all():
            # T√¨m h√†ng c√≥ gi√° tr·ªã trung b√¨nh l·ªõn nh·∫•t cho th·ªëng k√™ hi·ªán t·∫°i
            max_row = team_means.loc[team_means[stat].idxmax()]
            highest_teams.append({
                "Th·ªëng k√™": stat,
                "ƒê·ªôi": max_row["Team"],
                "Gi√° tr·ªã Trung b√¨nh": round(max_row[stat], 2)
            })
        else:
             print(f"B·ªè qua t√≠nh to√°n trung b√¨nh cao nh·∫•t cho '{stat}' do thi·∫øu d·ªØ li·ªáu ho·∫∑c t·∫•t c·∫£ l√† NaN.")

    # T·∫°o DataFrame t·ª´ k·∫øt qu·∫£
    highest_teams_df = pd.DataFrame(highest_teams)

# L∆∞u th·ªëng k√™ ƒë·ªôi c√≥ gi√° tr·ªã cao nh·∫•t v√†o t·ªáp highest_team_stats.csv trong th∆∞ m·ª•c 'csv'
highest_team_stats_path = os.path.join(csv_dir, "highest_team_stats.csv")
highest_teams_df.to_csv(highest_team_stats_path, index=False, encoding="utf-8-sig")
print(f"‚úÖ ƒê√£ l∆∞u th·ªëng k√™ ƒë·ªôi c√≥ gi√° tr·ªã cao nh·∫•t v√†o {highest_team_stats_path} v·ªõi {highest_teams_df.shape[0]} h√†ng.")

# 5. X√°c ƒë·ªãnh ƒë·ªôi c√≥ th√†nh t√≠ch t·ªët nh·∫•t
# ƒê·ªãnh nghƒ©a c√°c th·ªëng k√™ m√† gi√° tr·ªã th·∫•p h∆°n l√† t·ªët h∆°n (v√≠ d·ª•: s·ªë b√†n thua, th·∫ª ph·∫°t, m·∫•t b√≥ng)
negative_stats = [
    "GA90", "crdY", "crdR", "Lost", "Mis", "Dis", "Fls", "Off", "Aerl Lost"
]

# ƒê·∫£m b·∫£o highest_teams_df kh√¥ng r·ªóng tr∆∞·ªõc khi ti·∫øp t·ª•c
if not highest_teams_df.empty:
    # L·ªçc ra c√°c th·ªëng k√™ "t√≠ch c·ª±c" (kh√¥ng n·∫±m trong danh s√°ch negative_stats) th·ª±c s·ª± c√≥ trong DataFrame
    # S·ª≠ d·ª•ng copy()
    positive_stats_df = highest_teams_df[~highest_teams_df["Th·ªëng k√™"].isin(negative_stats)].copy()

    if not positive_stats_df.empty:
        # ƒê·∫øm s·ªë l·∫ßn m·ªói ƒë·ªôi ƒë·ª©ng ƒë·∫ßu trong c√°c th·ªëng k√™ t√≠ch c·ª±c
        team_wins = positive_stats_df["ƒê·ªôi"].value_counts()

        if not team_wins.empty:
            # X√°c ƒë·ªãnh ƒë·ªôi c√≥ s·ªë l·∫ßn ƒë·ª©ng ƒë·∫ßu nhi·ªÅu nh·∫•t
            best_team = team_wins.idxmax()
            win_count = team_wins.max()

            print(f"\nƒê·ªôi c√≥ th√†nh t√≠ch t·ªët nh·∫•t m√πa gi·∫£i Premier League 2024-2025 (d·ª±a tr√™n vi·ªác d·∫´n ƒë·∫ßu nhi·ªÅu th·ªëng k√™ t√≠ch c·ª±c nh·∫•t) l√†: {best_team}")
            print(f"H·ªç d·∫´n ƒë·∫ßu trong {win_count} tr√™n t·ªïng s·ªë {len(positive_stats_df)} th·ªëng k√™ t√≠ch c·ª±c.")
        else:
            print("\nKh√¥ng th·ªÉ x√°c ƒë·ªãnh ƒë·ªôi c√≥ th√†nh t√≠ch t·ªët nh·∫•t v√¨ kh√¥ng c√≥ ƒë·ªôi n√†o d·∫´n ƒë·∫ßu trong c√°c th·ªëng k√™ t√≠ch c·ª±c.")
    else:
        print("\nKh√¥ng t√¨m th·∫•y th·ªëng k√™ t√≠ch c·ª±c n√†o ƒë·ªÉ x√°c ƒë·ªãnh ƒë·ªôi c√≥ th√†nh t√≠ch t·ªët nh·∫•t.")
else:
    print("\nKh√¥ng th·ªÉ x√°c ƒë·ªãnh ƒë·ªôi c√≥ th√†nh t√≠ch t·ªët nh·∫•t v√¨ d·ªØ li·ªáu th·ªëng k√™ ƒë·ªôi c√≥ gi√° tr·ªã cao nh·∫•t kh√¥ng kh·∫£ d·ª•ng.")